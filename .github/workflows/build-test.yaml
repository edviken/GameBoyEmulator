name: 'build-test'

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
      - 'develop'
      - 'feature/**'
      - 'bugfix/**'
  pull_request:

jobs:
  BuildAndTest:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
        compiler:
          - llvm-13.0.0
          - gcc-11
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug
        include:
          # Add appropriate variables for gcov version required. This will intentionally break
          # if you try to use a compiler that does not have gcov set
          - compiler: gcc-11
            gcov_executable: gcov
          - compiler: llvm-13.0.0
            gcov_executable: "llvm-cov gcov"

          # This exists solely to make sure a non-multiconfig build works
          - os: ubuntu-latest
            compiler: gcc-11
            generator: "Unix Makefiles"
            build_type: Debug
            gcov_executable: gcov
            developer_mode: On

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
#          vcvarsall: ${{ contains(matrix.os, 'windows' )}}
          cmake: true
          ninja: true
          conan: false
          vcpkg: false
          ccache: false
          clangtidy: true
          cppcheck: true
          gcovr: true
          opencppcoverage: true
      # build project
      - name: Configure cmake
        run: cmake -B ./build -S . -G "${{ matrix.generator }}" -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -DOPT_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }} -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_C_FLAGS=--coverage
      - name: Build
        run: cmake --build ./build --target CartridgeInterpreterTest --config ${{matrix.build_type}}
      # run tests
      - name: Unix - Test and coverage
        if: runner.os != 'Windows'
        working-directory: ./build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{matrix.build_type}}
          gcovr -j ${{env.nproc}} --delete --root \.\./ --print-summary --xml-pretty --xml coverage.xml --gcov-executable '${{ matrix.gcov_executable }}' .

      - name: CPack
        if: matrix.package_generator != ''
        working-directory: ./build
        run: |
          cpack -C ${{matrix.build_type}} -G ${{matrix.package_generator}}
      - name: Publish Tagged Release
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.package_generator != '' }}
        with:
          files: |
            build/*-*${{ matrix.build_type }}*-*.*
      - name: Publish to codecov
        uses: codecov/codecov-action@v3
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml
